---
import LayoutGallery from '../layouts/LayoutGallery.astro'
import { fetchGalleryImages } from '../lib/galleryService'

interface ImageItem {
  name: string
  size: number
  uploaded: string
  type: string
  url: string
  width?: number
  height?: number
}

// サーバーサイドでデータを取得
let images: ImageItem[] = []
let hasError = false
let errorMessage = ''

try {
  const data = await fetchGalleryImages()
  images = data.images
} catch (error) {
  hasError = true
  errorMessage = error instanceof Error ? error.message : 'Unknown error'
}
---

<LayoutGallery title="Gallery" description="VRChatで撮影した写真">
  <p class="mb-2 text-lg dark:text-white">VRChatで撮影した写真を載せています。</p>
  {
    hasError ? (
      <div class="p-4 text-center text-red-500">
        <p>画像の読み込みに失敗しました。</p>
        <p class="mt-2 text-sm">{errorMessage}</p>
      </div>
    ) : (
      <div id="pswp-gallery" class="masonry-grid">
        {images.map((image, index) => {
          const aspectRatio = (image.width || 1920) / (image.height || 1080)
          const isWide = aspectRatio > 1.5
          const isPanoramic = aspectRatio > 2.5

          return (
            <div class={`masonry-item ${isPanoramic ? 'panoramic' : isWide ? 'wide' : ''}`}>
              <a
                href={image.url}
                data-pswp-width={image.width || 1920}
                data-pswp-height={image.height || 1080}
                data-pswp-src={image.url}
                data-pswp-pid={index}
                class="block"
                onclick="return false;"
              >
                <img
                  src={image.url}
                  alt={image.name}
                  class="w-full rounded-md object-cover transition-opacity duration-300 hover:opacity-70"
                  loading="lazy"
                  style={`aspect-ratio: ${aspectRatio}`}
                />
              </a>
            </div>
          )
        })}
      </div>
    )
  }
</LayoutGallery>

<script>
  import { initPhotoSwipe } from '../scripts/photoswipeInit'

  document.addEventListener('DOMContentLoaded', () => {
    initPhotoSwipe()
  })
</script>

<style>
  .masonry-grid {
    column-count: 2;
    column-gap: 0.75rem;
    padding: 0;
  }

  .masonry-item {
    break-inside: avoid;
    margin-bottom: 0.5rem;
    display: inline-block;
    width: 100%;
  }

  /* 横長画像の調整 */
  .masonry-item.wide img {
    min-height: 140px; /* スマホ用に調整 */
  }

  /* パノラマ画像の調整 */
  .masonry-item.panoramic img {
    min-height: 100px; /* スマホ用に調整 */
  }

  /* レスポンシブ対応 */
  @media (min-width: 640px) {
    .masonry-grid {
      column-count: 2; /* 変更なし - 2カラム維持 */
      column-gap: 0.75rem;
    }

    .masonry-item {
      margin-bottom: 0.75rem;
    }

    /* より大きな画面では横長画像をより目立たせる */
    .masonry-item.wide img {
      min-height: 180px;
    }

    .masonry-item.panoramic img {
      min-height: 140px;
    }
  }

  @media (min-width: 768px) {
    .masonry-grid {
      column-count: 2; /* 2カラム維持 */
      column-gap: 1rem;
    }

    .masonry-item {
      margin-bottom: 1rem;
    }

    .masonry-item.wide img {
      min-height: 220px;
    }

    .masonry-item.panoramic img {
      min-height: 180px;
    }
  }

  @media (min-width: 1024px) {
    .masonry-grid {
      column-count: 3; /* 2から3に変更 */
    }

    .masonry-item.wide img {
      min-height: 200px;
    }

    .masonry-item.panoramic img {
      min-height: 160px;
    }
  }

  @media (min-width: 1280px) {
    .masonry-grid {
      column-count: 3; /* 3カラム維持 */
    }

    .masonry-item.wide img {
      min-height: 220px;
    }

    .masonry-item.panoramic img {
      min-height: 180px;
    }
  }
</style>
