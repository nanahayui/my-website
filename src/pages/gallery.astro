---
import LayoutGallery from '../layouts/LayoutGallery.astro'
import ImageSkeleton from '../components/ImageSkeleton.astro'
import { fetchGalleryImages } from '../lib/galleryService'

interface ImageItem {
  name: string
  size: number
  uploaded: string
  type: string
  url: string
  width?: number
  height?: number
}

// サーバーサイドでデータを取得
let images: ImageItem[] = []
let hasError = false
let errorMessage = ''

try {
  const data = await fetchGalleryImages()
  images = data.images
} catch (error) {
  hasError = true
  errorMessage = error instanceof Error ? error.message : 'Unknown error'
}
---

<LayoutGallery title="Gallery" description="VRChatで撮影した写真">
  <p class="mb-2 text-lg dark:text-white">VRChatで撮影した写真を載せています。</p>
  {
    hasError ? (
      <div class="p-4 text-center text-red-500">
        <p>画像の読み込みに失敗しました。</p>
        <p class="mt-2 text-sm">{errorMessage}</p>
      </div>
    ) : (
      <div id="pswp-gallery" class="masonry-grid">
        {images.map((image, index) => {
          const aspectRatio = (image.width || 1920) / (image.height || 1080)
          const isWide = aspectRatio > 1.5
          const isPanoramic = aspectRatio > 2.5

          return (
            <div class={`masonry-item ${isPanoramic ? 'panoramic' : isWide ? 'wide' : ''}`}>
              <a
                href={image.url}
                data-pswp-width={image.width || 1920}
                data-pswp-height={image.height || 1080}
                data-pswp-src={image.url}
                data-pswp-pid={index}
                class="relative block"
                onclick="return false;"
              >
                <ImageSkeleton aspectRatio={aspectRatio} class="skeleton-placeholder" />
                <img
                  src={image.url}
                  alt={image.name}
                  class="actual-image absolute inset-0 w-full rounded-md object-cover opacity-0 transition-opacity duration-300 hover:opacity-70"
                  loading="lazy"
                  style={`aspect-ratio: ${aspectRatio}`}
                />
              </a>
            </div>
          )
        })}
      </div>
    )
  }
</LayoutGallery>

<script>
  import { initPhotoSwipe } from '../scripts/photoswipeInit'

  class MasonryLayout {
    private container: HTMLElement | null = null
    private columnHeights: number[] = []
    private columns = 2
    private gap = 12

    constructor() {
      this.init()
    }

    private init() {
      this.container = document.querySelector('.masonry-grid')
      if (!this.container) return

      this.updateColumns()
      this.layout()

      window.addEventListener('resize', () => {
        this.updateColumns()
        this.layout()
      })
    }

    private updateColumns() {
      const width = window.innerWidth
      if (width >= 1024) {
        this.columns = 3
        this.gap = 16
      } else if (width >= 640) {
        this.columns = 2
        this.gap = 12
      } else {
        this.columns = 2
        this.gap = 12
      }
      this.columnHeights = new Array(this.columns).fill(0)
    }

    private layout() {
      if (!this.container) return

      const items = this.container.querySelectorAll('.masonry-item') as NodeListOf<HTMLElement>
      const containerWidth = this.container.offsetWidth
      const itemWidth = (containerWidth - (this.columns - 1) * this.gap) / this.columns

      items.forEach((item) => {
        const shortestColumn = this.columnHeights.indexOf(Math.min(...this.columnHeights))
        const x = shortestColumn * (itemWidth + this.gap)
        const y = this.columnHeights[shortestColumn]

        item.style.position = 'absolute'
        item.style.left = `${x}px`
        item.style.top = `${y}px`
        item.style.width = `${itemWidth}px`

        // Skeletonの高さを使用してレイアウトを計算
        const skeleton = item.querySelector('.skeleton-placeholder') as HTMLElement
        if (skeleton) {
          // Skeletonのアスペクト比から高さを計算
          const aspectRatio = parseFloat(skeleton.dataset.aspectRatio || '1.5')
          const height = itemWidth / aspectRatio
          this.columnHeights[shortestColumn] += height + this.gap
        }
      })

      // コンテナの高さを更新
      if (this.container) {
        this.container.style.height = `${Math.max(...this.columnHeights)}px`
      }
    }

    public relayout() {
      this.columnHeights = new Array(this.columns).fill(0)
      this.layout()
    }
  }

  // 画像読み込み処理を関数化
  function initializeGallery() {
    // DOM要素が存在することを確認
    const galleryContainer = document.querySelector('.masonry-grid')
    if (!galleryContainer) {
      // DOM要素がまだ存在しない場合は少し待つ
      setTimeout(initializeGallery, 50)
      return
    }

    initPhotoSwipe()

    // Masonryレイアウトを初期化（Skeletonベース）
    const masonry = new MasonryLayout()

    // 画像読み込み完了時の処理
    const handleImageLoad = (img: HTMLImageElement) => {
      const container = img.closest('.masonry-item')
      const skeleton = container?.querySelector('.skeleton-placeholder') as HTMLElement

      if (skeleton) {
        skeleton.style.display = 'none'
      }
      img.style.opacity = '1'
    }

    // 画像読み込み処理
    const images = document.querySelectorAll(
      '.masonry-item img.actual-image',
    ) as NodeListOf<HTMLImageElement>

    images.forEach((img) => {
      if (img.complete && img.naturalHeight !== 0) {
        handleImageLoad(img)
      } else {
        img.addEventListener('load', () => {
          handleImageLoad(img)
        })

        img.addEventListener('error', () => {
          // エラー時もSkeletonを非表示にする
          const container = img.closest('.masonry-item')
          const skeleton = container?.querySelector('.skeleton-placeholder') as HTMLElement
          if (skeleton) {
            skeleton.style.display = 'none'
          }
        })
      }
    })
  }

  // 初期化処理
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeGallery)
  } else {
    // DOM が既に読み込まれている場合（ページ遷移時など）
    initializeGallery()
  }

  // Astroのページ遷移に対応
  document.addEventListener('astro:page-load', initializeGallery)
</script>
